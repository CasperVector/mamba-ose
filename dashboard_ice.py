# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.4
#
# <auto-generated>
#
# Generated from file `dashboard.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Dashboard
_M_Dashboard = Ice.openModule('Dashboard')
__name__ = 'Dashboard'

if '_t_bytes' not in _M_Dashboard.__dict__:
    _M_Dashboard._t_bytes = IcePy.defineSequence('::Dashboard::bytes', (), IcePy._t_byte)

if '_t_strings' not in _M_Dashboard.__dict__:
    _M_Dashboard._t_strings = IcePy.defineSequence('::Dashboard::strings', (), IcePy._t_string)

if 'UnauthorizedError' not in _M_Dashboard.__dict__:
    _M_Dashboard.UnauthorizedError = Ice.createTempClass()
    class UnauthorizedError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Dashboard::UnauthorizedError'

    _M_Dashboard._t_UnauthorizedError = IcePy.defineException('::Dashboard::UnauthorizedError', UnauthorizedError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnauthorizedError._ice_type = _M_Dashboard._t_UnauthorizedError

    _M_Dashboard.UnauthorizedError = UnauthorizedError
    del UnauthorizedError

_M_Dashboard._t_TerminalClient = IcePy.defineValue('::Dashboard::TerminalClient', Ice.Value, -1, (), False, True, None, ())

if 'TerminalClientPrx' not in _M_Dashboard.__dict__:
    _M_Dashboard.TerminalClientPrx = Ice.createTempClass()
    class TerminalClientPrx(Ice.ObjectPrx):

        def stdout(self, s, context=None):
            return _M_Dashboard.TerminalClient._op_stdout.invoke(self, ((s, ), context))

        def stdoutAsync(self, s, context=None):
            return _M_Dashboard.TerminalClient._op_stdout.invokeAsync(self, ((s, ), context))

        def begin_stdout(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalClient._op_stdout.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_stdout(self, _r):
            return _M_Dashboard.TerminalClient._op_stdout.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Dashboard.TerminalClientPrx.ice_checkedCast(proxy, '::Dashboard::TerminalClient', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Dashboard.TerminalClientPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Dashboard::TerminalClient'
    _M_Dashboard._t_TerminalClientPrx = IcePy.defineProxy('::Dashboard::TerminalClient', TerminalClientPrx)

    _M_Dashboard.TerminalClientPrx = TerminalClientPrx
    del TerminalClientPrx

    _M_Dashboard.TerminalClient = Ice.createTempClass()
    class TerminalClient(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Dashboard::TerminalClient', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Dashboard::TerminalClient'

        @staticmethod
        def ice_staticId():
            return '::Dashboard::TerminalClient'

        def stdout(self, s, current=None):
            raise NotImplementedError("servant method 'stdout' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_TerminalClientDisp)

        __repr__ = __str__

    _M_Dashboard._t_TerminalClientDisp = IcePy.defineClass('::Dashboard::TerminalClient', TerminalClient, (), None, ())
    TerminalClient._ice_type = _M_Dashboard._t_TerminalClientDisp

    TerminalClient._op_stdout = IcePy.Operation('stdout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_bytes, False, 0),), (), None, ())

    _M_Dashboard.TerminalClient = TerminalClient
    del TerminalClient

if 'DataFrame' not in _M_Dashboard.__dict__:
    _M_Dashboard.DataFrame = Ice.createTempClass()
    class DataFrame(object):
        def __init__(self, name='', value=None, timestamp=0.0):
            self.name = name
            self.value = value
            self.timestamp = timestamp

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Dashboard.DataFrame):
                return NotImplemented
            else:
                if self.name != other.name:
                    return False
                if self.value != other.value:
                    return False
                if self.timestamp != other.timestamp:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_DataFrame)

        __repr__ = __str__

    _M_Dashboard._t_DataFrame = IcePy.defineStruct('::Dashboard::DataFrame', DataFrame, (), (
        ('name', (), IcePy._t_string),
        ('value', (), _M_Dashboard._t_bytes),
        ('timestamp', (), IcePy._t_double)
    ))

    _M_Dashboard.DataFrame = DataFrame
    del DataFrame

if 'DataType' not in _M_Dashboard.__dict__:
    _M_Dashboard.DataType = Ice.createTempClass()
    class DataType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DataType.Float = DataType("Float", 0)
    DataType.String = DataType("String", 1)
    DataType._enumerators = { 0:DataType.Float, 1:DataType.String }

    _M_Dashboard._t_DataType = IcePy.defineEnum('::Dashboard::DataType', DataType, (), DataType._enumerators)

    _M_Dashboard.DataType = DataType
    del DataType

if '_t_Shape' not in _M_Dashboard.__dict__:
    _M_Dashboard._t_Shape = IcePy.defineSequence('::Dashboard::Shape', (), IcePy._t_int)

if 'DataDescriptor' not in _M_Dashboard.__dict__:
    _M_Dashboard.DataDescriptor = Ice.createTempClass()
    class DataDescriptor(object):
        def __init__(self, name='', type=_M_Dashboard.DataType.Float, shape=None):
            self.name = name
            self.type = type
            self.shape = shape

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.type)
            if self.shape:
                for _i0 in self.shape:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Dashboard.DataDescriptor):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.shape is None or other.shape is None:
                    if self.shape != other.shape:
                        return (-1 if self.shape is None else 1)
                else:
                    if self.shape < other.shape:
                        return -1
                    elif self.shape > other.shape:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_DataDescriptor)

        __repr__ = __str__

    _M_Dashboard._t_DataDescriptor = IcePy.defineStruct('::Dashboard::DataDescriptor', DataDescriptor, (), (
        ('name', (), IcePy._t_string),
        ('type', (), _M_Dashboard._t_DataType),
        ('shape', (), _M_Dashboard._t_Shape)
    ))

    _M_Dashboard.DataDescriptor = DataDescriptor
    del DataDescriptor

if '_t_DataDescriptors' not in _M_Dashboard.__dict__:
    _M_Dashboard._t_DataDescriptors = IcePy.defineSequence('::Dashboard::DataDescriptors', (), _M_Dashboard._t_DataDescriptor)

if '_t_DataFrames' not in _M_Dashboard.__dict__:
    _M_Dashboard._t_DataFrames = IcePy.defineSequence('::Dashboard::DataFrames', (), _M_Dashboard._t_DataFrame)

if 'ScanExitStatus' not in _M_Dashboard.__dict__:
    _M_Dashboard.ScanExitStatus = Ice.createTempClass()
    class ScanExitStatus(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ScanExitStatus.Success = ScanExitStatus("Success", 0)
    ScanExitStatus.Abort = ScanExitStatus("Abort", 1)
    ScanExitStatus.Fail = ScanExitStatus("Fail", 2)
    ScanExitStatus._enumerators = { 0:ScanExitStatus.Success, 1:ScanExitStatus.Abort, 2:ScanExitStatus.Fail }

    _M_Dashboard._t_ScanExitStatus = IcePy.defineEnum('::Dashboard::ScanExitStatus', ScanExitStatus, (), ScanExitStatus._enumerators)

    _M_Dashboard.ScanExitStatus = ScanExitStatus
    del ScanExitStatus

_M_Dashboard._t_DataClient = IcePy.defineValue('::Dashboard::DataClient', Ice.Value, -1, (), False, True, None, ())

if 'DataClientPrx' not in _M_Dashboard.__dict__:
    _M_Dashboard.DataClientPrx = Ice.createTempClass()
    class DataClientPrx(Ice.ObjectPrx):

        def scanStart(self, id, keys, context=None):
            return _M_Dashboard.DataClient._op_scanStart.invoke(self, ((id, keys), context))

        def scanStartAsync(self, id, keys, context=None):
            return _M_Dashboard.DataClient._op_scanStart.invokeAsync(self, ((id, keys), context))

        def begin_scanStart(self, id, keys, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.DataClient._op_scanStart.begin(self, ((id, keys), _response, _ex, _sent, context))

        def end_scanStart(self, _r):
            return _M_Dashboard.DataClient._op_scanStart.end(self, _r)

        def dataUpdate(self, data, context=None):
            return _M_Dashboard.DataClient._op_dataUpdate.invoke(self, ((data, ), context))

        def dataUpdateAsync(self, data, context=None):
            return _M_Dashboard.DataClient._op_dataUpdate.invokeAsync(self, ((data, ), context))

        def begin_dataUpdate(self, data, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.DataClient._op_dataUpdate.begin(self, ((data, ), _response, _ex, _sent, context))

        def end_dataUpdate(self, _r):
            return _M_Dashboard.DataClient._op_dataUpdate.end(self, _r)

        def scanEnd(self, status, context=None):
            return _M_Dashboard.DataClient._op_scanEnd.invoke(self, ((status, ), context))

        def scanEndAsync(self, status, context=None):
            return _M_Dashboard.DataClient._op_scanEnd.invokeAsync(self, ((status, ), context))

        def begin_scanEnd(self, status, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.DataClient._op_scanEnd.begin(self, ((status, ), _response, _ex, _sent, context))

        def end_scanEnd(self, _r):
            return _M_Dashboard.DataClient._op_scanEnd.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Dashboard.DataClientPrx.ice_checkedCast(proxy, '::Dashboard::DataClient', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Dashboard.DataClientPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Dashboard::DataClient'
    _M_Dashboard._t_DataClientPrx = IcePy.defineProxy('::Dashboard::DataClient', DataClientPrx)

    _M_Dashboard.DataClientPrx = DataClientPrx
    del DataClientPrx

    _M_Dashboard.DataClient = Ice.createTempClass()
    class DataClient(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Dashboard::DataClient', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Dashboard::DataClient'

        @staticmethod
        def ice_staticId():
            return '::Dashboard::DataClient'

        def scanStart(self, id, keys, current=None):
            raise NotImplementedError("servant method 'scanStart' not implemented")

        def dataUpdate(self, data, current=None):
            raise NotImplementedError("servant method 'dataUpdate' not implemented")

        def scanEnd(self, status, current=None):
            raise NotImplementedError("servant method 'scanEnd' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_DataClientDisp)

        __repr__ = __str__

    _M_Dashboard._t_DataClientDisp = IcePy.defineClass('::Dashboard::DataClient', DataClient, (), None, ())
    DataClient._ice_type = _M_Dashboard._t_DataClientDisp

    DataClient._op_scanStart = IcePy.Operation('scanStart', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_Dashboard._t_DataDescriptors, False, 0)), (), None, ())
    DataClient._op_dataUpdate = IcePy.Operation('dataUpdate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_DataFrames, False, 0),), (), None, ())
    DataClient._op_scanEnd = IcePy.Operation('scanEnd', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_ScanExitStatus, False, 0),), (), None, ())

    _M_Dashboard.DataClient = DataClient
    del DataClient

_M_Dashboard._t_SessionManager = IcePy.defineValue('::Dashboard::SessionManager', Ice.Value, -1, (), False, True, None, ())

if 'SessionManagerPrx' not in _M_Dashboard.__dict__:
    _M_Dashboard.SessionManagerPrx = Ice.createTempClass()
    class SessionManagerPrx(Ice.ObjectPrx):

        def login(self, username, password, context=None):
            return _M_Dashboard.SessionManager._op_login.invoke(self, ((username, password), context))

        def loginAsync(self, username, password, context=None):
            return _M_Dashboard.SessionManager._op_login.invokeAsync(self, ((username, password), context))

        def begin_login(self, username, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.SessionManager._op_login.begin(self, ((username, password), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_Dashboard.SessionManager._op_login.end(self, _r)

        def logout(self, context=None):
            return _M_Dashboard.SessionManager._op_logout.invoke(self, ((), context))

        def logoutAsync(self, context=None):
            return _M_Dashboard.SessionManager._op_logout.invokeAsync(self, ((), context))

        def begin_logout(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.SessionManager._op_logout.begin(self, ((), _response, _ex, _sent, context))

        def end_logout(self, _r):
            return _M_Dashboard.SessionManager._op_logout.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Dashboard.SessionManagerPrx.ice_checkedCast(proxy, '::Dashboard::SessionManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Dashboard.SessionManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Dashboard::SessionManager'
    _M_Dashboard._t_SessionManagerPrx = IcePy.defineProxy('::Dashboard::SessionManager', SessionManagerPrx)

    _M_Dashboard.SessionManagerPrx = SessionManagerPrx
    del SessionManagerPrx

    _M_Dashboard.SessionManager = Ice.createTempClass()
    class SessionManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Dashboard::SessionManager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Dashboard::SessionManager'

        @staticmethod
        def ice_staticId():
            return '::Dashboard::SessionManager'

        def login(self, username, password, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def logout(self, current=None):
            raise NotImplementedError("servant method 'logout' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_SessionManagerDisp)

        __repr__ = __str__

    _M_Dashboard._t_SessionManagerDisp = IcePy.defineClass('::Dashboard::SessionManager', SessionManager, (), None, ())
    SessionManager._ice_type = _M_Dashboard._t_SessionManagerDisp

    SessionManager._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Dashboard._t_UnauthorizedError,))
    SessionManager._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Dashboard.SessionManager = SessionManager
    del SessionManager

_M_Dashboard._t_TerminalHost = IcePy.defineValue('::Dashboard::TerminalHost', Ice.Value, -1, (), False, True, None, ())

if 'TerminalHostPrx' not in _M_Dashboard.__dict__:
    _M_Dashboard.TerminalHostPrx = Ice.createTempClass()
    class TerminalHostPrx(Ice.ObjectPrx):

        def emitCommand(self, cmd, context=None):
            return _M_Dashboard.TerminalHost._op_emitCommand.invoke(self, ((cmd, ), context))

        def emitCommandAsync(self, cmd, context=None):
            return _M_Dashboard.TerminalHost._op_emitCommand.invokeAsync(self, ((cmd, ), context))

        def begin_emitCommand(self, cmd, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalHost._op_emitCommand.begin(self, ((cmd, ), _response, _ex, _sent, context))

        def end_emitCommand(self, _r):
            return _M_Dashboard.TerminalHost._op_emitCommand.end(self, _r)

        def registerClient(self, client, context=None):
            return _M_Dashboard.TerminalHost._op_registerClient.invoke(self, ((client, ), context))

        def registerClientAsync(self, client, context=None):
            return _M_Dashboard.TerminalHost._op_registerClient.invokeAsync(self, ((client, ), context))

        def begin_registerClient(self, client, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalHost._op_registerClient.begin(self, ((client, ), _response, _ex, _sent, context))

        def end_registerClient(self, _r):
            return _M_Dashboard.TerminalHost._op_registerClient.end(self, _r)

        def stdin(self, s, context=None):
            return _M_Dashboard.TerminalHost._op_stdin.invoke(self, ((s, ), context))

        def stdinAsync(self, s, context=None):
            return _M_Dashboard.TerminalHost._op_stdin.invokeAsync(self, ((s, ), context))

        def begin_stdin(self, s, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalHost._op_stdin.begin(self, ((s, ), _response, _ex, _sent, context))

        def end_stdin(self, _r):
            return _M_Dashboard.TerminalHost._op_stdin.end(self, _r)

        def resize(self, rows, cols, context=None):
            return _M_Dashboard.TerminalHost._op_resize.invoke(self, ((rows, cols), context))

        def resizeAsync(self, rows, cols, context=None):
            return _M_Dashboard.TerminalHost._op_resize.invokeAsync(self, ((rows, cols), context))

        def begin_resize(self, rows, cols, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalHost._op_resize.begin(self, ((rows, cols), _response, _ex, _sent, context))

        def end_resize(self, _r):
            return _M_Dashboard.TerminalHost._op_resize.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Dashboard.TerminalHostPrx.ice_checkedCast(proxy, '::Dashboard::TerminalHost', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Dashboard.TerminalHostPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Dashboard::TerminalHost'
    _M_Dashboard._t_TerminalHostPrx = IcePy.defineProxy('::Dashboard::TerminalHost', TerminalHostPrx)

    _M_Dashboard.TerminalHostPrx = TerminalHostPrx
    del TerminalHostPrx

    _M_Dashboard.TerminalHost = Ice.createTempClass()
    class TerminalHost(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Dashboard::TerminalHost', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Dashboard::TerminalHost'

        @staticmethod
        def ice_staticId():
            return '::Dashboard::TerminalHost'

        def emitCommand(self, cmd, current=None):
            raise NotImplementedError("servant method 'emitCommand' not implemented")

        def registerClient(self, client, current=None):
            raise NotImplementedError("servant method 'registerClient' not implemented")

        def stdin(self, s, current=None):
            raise NotImplementedError("servant method 'stdin' not implemented")

        def resize(self, rows, cols, current=None):
            raise NotImplementedError("servant method 'resize' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_TerminalHostDisp)

        __repr__ = __str__

    _M_Dashboard._t_TerminalHostDisp = IcePy.defineClass('::Dashboard::TerminalHost', TerminalHost, (), None, ())
    TerminalHost._ice_type = _M_Dashboard._t_TerminalHostDisp

    TerminalHost._op_emitCommand = IcePy.Operation('emitCommand', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_Dashboard._t_UnauthorizedError,))
    TerminalHost._op_registerClient = IcePy.Operation('registerClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_TerminalClientPrx, False, 0),), (), None, (_M_Dashboard._t_UnauthorizedError,))
    TerminalHost._op_stdin = IcePy.Operation('stdin', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_bytes, False, 0),), (), None, (_M_Dashboard._t_UnauthorizedError,))
    TerminalHost._op_resize = IcePy.Operation('resize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, (_M_Dashboard._t_UnauthorizedError,))

    _M_Dashboard.TerminalHost = TerminalHost
    del TerminalHost

_M_Dashboard._t_TerminalEventHandler = IcePy.defineValue('::Dashboard::TerminalEventHandler', Ice.Value, -1, (), False, True, None, ())

if 'TerminalEventHandlerPrx' not in _M_Dashboard.__dict__:
    _M_Dashboard.TerminalEventHandlerPrx = Ice.createTempClass()
    class TerminalEventHandlerPrx(Ice.ObjectPrx):

        def attach(self, token, context=None):
            return _M_Dashboard.TerminalEventHandler._op_attach.invoke(self, ((token, ), context))

        def attachAsync(self, token, context=None):
            return _M_Dashboard.TerminalEventHandler._op_attach.invokeAsync(self, ((token, ), context))

        def begin_attach(self, token, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalEventHandler._op_attach.begin(self, ((token, ), _response, _ex, _sent, context))

        def end_attach(self, _r):
            return _M_Dashboard.TerminalEventHandler._op_attach.end(self, _r)

        def enterExecution(self, cmd, context=None):
            return _M_Dashboard.TerminalEventHandler._op_enterExecution.invoke(self, ((cmd, ), context))

        def enterExecutionAsync(self, cmd, context=None):
            return _M_Dashboard.TerminalEventHandler._op_enterExecution.invokeAsync(self, ((cmd, ), context))

        def begin_enterExecution(self, cmd, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalEventHandler._op_enterExecution.begin(self, ((cmd, ), _response, _ex, _sent, context))

        def end_enterExecution(self, _r):
            return _M_Dashboard.TerminalEventHandler._op_enterExecution.end(self, _r)

        def leaveExecution(self, result, context=None):
            return _M_Dashboard.TerminalEventHandler._op_leaveExecution.invoke(self, ((result, ), context))

        def leaveExecutionAsync(self, result, context=None):
            return _M_Dashboard.TerminalEventHandler._op_leaveExecution.invokeAsync(self, ((result, ), context))

        def begin_leaveExecution(self, result, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.TerminalEventHandler._op_leaveExecution.begin(self, ((result, ), _response, _ex, _sent, context))

        def end_leaveExecution(self, _r):
            return _M_Dashboard.TerminalEventHandler._op_leaveExecution.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Dashboard.TerminalEventHandlerPrx.ice_checkedCast(proxy, '::Dashboard::TerminalEventHandler', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Dashboard.TerminalEventHandlerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Dashboard::TerminalEventHandler'
    _M_Dashboard._t_TerminalEventHandlerPrx = IcePy.defineProxy('::Dashboard::TerminalEventHandler', TerminalEventHandlerPrx)

    _M_Dashboard.TerminalEventHandlerPrx = TerminalEventHandlerPrx
    del TerminalEventHandlerPrx

    _M_Dashboard.TerminalEventHandler = Ice.createTempClass()
    class TerminalEventHandler(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Dashboard::TerminalEventHandler', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Dashboard::TerminalEventHandler'

        @staticmethod
        def ice_staticId():
            return '::Dashboard::TerminalEventHandler'

        def attach(self, token, current=None):
            raise NotImplementedError("servant method 'attach' not implemented")

        def enterExecution(self, cmd, current=None):
            raise NotImplementedError("servant method 'enterExecution' not implemented")

        def leaveExecution(self, result, current=None):
            raise NotImplementedError("servant method 'leaveExecution' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_TerminalEventHandlerDisp)

        __repr__ = __str__

    _M_Dashboard._t_TerminalEventHandlerDisp = IcePy.defineClass('::Dashboard::TerminalEventHandler', TerminalEventHandler, (), None, ())
    TerminalEventHandler._ice_type = _M_Dashboard._t_TerminalEventHandlerDisp

    TerminalEventHandler._op_attach = IcePy.Operation('attach', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    TerminalEventHandler._op_enterExecution = IcePy.Operation('enterExecution', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    TerminalEventHandler._op_leaveExecution = IcePy.Operation('leaveExecution', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Dashboard.TerminalEventHandler = TerminalEventHandler
    del TerminalEventHandler

_M_Dashboard._t_DataHost = IcePy.defineValue('::Dashboard::DataHost', Ice.Value, -1, (), False, True, None, ())

if 'DataHostPrx' not in _M_Dashboard.__dict__:
    _M_Dashboard.DataHostPrx = Ice.createTempClass()
    class DataHostPrx(Ice.ObjectPrx):

        def registerClient(self, client, context=None):
            return _M_Dashboard.DataHost._op_registerClient.invoke(self, ((client, ), context))

        def registerClientAsync(self, client, context=None):
            return _M_Dashboard.DataHost._op_registerClient.invokeAsync(self, ((client, ), context))

        def begin_registerClient(self, client, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.DataHost._op_registerClient.begin(self, ((client, ), _response, _ex, _sent, context))

        def end_registerClient(self, _r):
            return _M_Dashboard.DataHost._op_registerClient.end(self, _r)

        def subscribe(self, items, context=None):
            return _M_Dashboard.DataHost._op_subscribe.invoke(self, ((items, ), context))

        def subscribeAsync(self, items, context=None):
            return _M_Dashboard.DataHost._op_subscribe.invokeAsync(self, ((items, ), context))

        def begin_subscribe(self, items, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.DataHost._op_subscribe.begin(self, ((items, ), _response, _ex, _sent, context))

        def end_subscribe(self, _r):
            return _M_Dashboard.DataHost._op_subscribe.end(self, _r)

        def subscribeAll(self, context=None):
            return _M_Dashboard.DataHost._op_subscribeAll.invoke(self, ((), context))

        def subscribeAllAsync(self, context=None):
            return _M_Dashboard.DataHost._op_subscribeAll.invokeAsync(self, ((), context))

        def begin_subscribeAll(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Dashboard.DataHost._op_subscribeAll.begin(self, ((), _response, _ex, _sent, context))

        def end_subscribeAll(self, _r):
            return _M_Dashboard.DataHost._op_subscribeAll.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Dashboard.DataHostPrx.ice_checkedCast(proxy, '::Dashboard::DataHost', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Dashboard.DataHostPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Dashboard::DataHost'
    _M_Dashboard._t_DataHostPrx = IcePy.defineProxy('::Dashboard::DataHost', DataHostPrx)

    _M_Dashboard.DataHostPrx = DataHostPrx
    del DataHostPrx

    _M_Dashboard.DataHost = Ice.createTempClass()
    class DataHost(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Dashboard::DataHost', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Dashboard::DataHost'

        @staticmethod
        def ice_staticId():
            return '::Dashboard::DataHost'

        def registerClient(self, client, current=None):
            raise NotImplementedError("servant method 'registerClient' not implemented")

        def subscribe(self, items, current=None):
            raise NotImplementedError("servant method 'subscribe' not implemented")

        def subscribeAll(self, current=None):
            raise NotImplementedError("servant method 'subscribeAll' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Dashboard._t_DataHostDisp)

        __repr__ = __str__

    _M_Dashboard._t_DataHostDisp = IcePy.defineClass('::Dashboard::DataHost', DataHost, (), None, ())
    DataHost._ice_type = _M_Dashboard._t_DataHostDisp

    DataHost._op_registerClient = IcePy.Operation('registerClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_DataClientPrx, False, 0),), (), None, (_M_Dashboard._t_UnauthorizedError,))
    DataHost._op_subscribe = IcePy.Operation('subscribe', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Dashboard._t_strings, False, 0),), (), None, (_M_Dashboard._t_UnauthorizedError,))
    DataHost._op_subscribeAll = IcePy.Operation('subscribeAll', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_Dashboard._t_UnauthorizedError,))

    _M_Dashboard.DataHost = DataHost
    del DataHost

# End of module Dashboard
